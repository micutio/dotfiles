[user]
	name = Michael Wagner
	email = michael-a.wagner@rohde-schwarz.com

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
    process = git-lfs filter-process

[difftool "bc3"]
    path = c:\\Program Files\\Beyond Compare 4\\BCompare.exe

[mergetool "bc3"]
    path = c:\\Program Files\\Beyond Compare 4\\BCompare.exe

[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    # make often typed commands more confortable
    st = status --short --branch

    # more stat when you pull a branch in
    pull = pull --stat

    # show all currently ignored files
    ignored = ls-files -o -i --exclude-standard

    # commit always with a signoff-by and verbose so you
    # can check the actual changes again
    cs = commit --signoff --verbose

    # clean untracked files, untracked directories and everything else
    # This produce a clean state, similar after fresh pull.
    cleanall = clean --force -d -x

    # list all new commits after you fetched, with stats, but excluding merges
    lc = log ORIG_HEAD.. --stat --no-merges

    # timezone aware version
    llog = log --date=local

    # fires up a git daemon for the repo you are currently in
    serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

    gb = branch -av

    lg = log --color --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    log-graph = log --all --graph --decorate

    w = !git branch -a && git log --branches --oneline --graph --decorate --simplify-by-decoration --since='2 months ago'

    diffstat      = diff --stat -r

    last          = log -1 HEAD

    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

    changes       = "!sh -c 'git status | sed -n \"/Untracked/N;//N;1,//d;s/^#/?/p\"; git diff --name-status -r \"$@\"' -"

    who           = shortlog -s --

    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    lolap = log --graph --decorate --pretty=oneline --abbrev-commit --all --patch

    # for tex, markdown files
    wdiff = diff --color-words

    # specialized grep command for C/C++ and programming
    # cases at all use
    g = grep --break --heading --line-number --show-function --before-context 10 --after-context 2

    merge = merge --progress --verbose

    # Update all present submodules to its current selected rev
    up = !git pull --rebase --prune $@ && git submodule sync --recursive && git submodule update --init --recursive

[core]
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    editor = nano
    symlinks = true
    autocrlf = true

[format]
    commitMessageColumns = 72 

[http]
    # stop verifying SSL for self signed certificates (only if
    # really required! Think about the consequences
    # sslVerify = false

[merge]
    tool = bc3
    log = true
    summary = true
    stat = true

[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
    submodule = log
    tool = bc3

[apply]
    whitespace = fix

[commit]
    signoff = yes
    template = ~/.gitmessage

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    required = true
    Process = git-lfs filter-process

[credential]
    helper = manager
    # helper = cache --timeout=43200

[pull]
    # rebase = true
    ff = only

[tgit]
    projectlanguage = 1033
    logminsize = 10
    logwidthmarker = 72
    warnnosignedoffby = false

[gui]
    recentrepo = C:/git-eb500-frontpanel/eb500-frontpanel
    recentrepo = C:/git-master/receiver
    recentrepo = C:/git-petalinux/symi-petalinux-toolchain

